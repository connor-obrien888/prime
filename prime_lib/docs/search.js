window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "primesw", "modulename": "primesw", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "primesw.prime", "modulename": "primesw.prime", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "primesw.prime.SYNTH_XPOS", "modulename": "primesw.prime", "qualname": "SYNTH_XPOS", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([69215.97057508, 69480.44662705, 69706.40911294, 69969.18467343,\n       70231.11857452, 70454.91674057, 70715.18415549, 70974.62662114,\n       71196.30325009, 71454.11198298, 71711.11182052, 71930.70839187,\n       72186.10608653, 72440.71045452, 72658.26693929, 72911.29961567,\n       73163.55400328, 73379.10893932, 73629.82119345, 73879.76950962,\n       74093.36015524, 74341.79489098, 74589.47977345, 74801.14208574,\n       75047.34088887, 75292.80336019, 75502.57231563, 75746.57534655,\n       75989.85512801, 76197.76442711, 76439.61054906, 76680.7461448 ,\n       76886.82833966, 77126.55527427, 77365.58400364, 77569.8706008 ,\n       77807.51485289, 78044.47276422, 78246.99446109, 78482.59130139,\n       78717.51337097, 78918.29986461, 79151.88352716, 79384.80363257,\n       79583.88365476, 79815.48746062, 80046.43841324, 80243.83985851,\n       80473.4959342 , 80702.50977538])"}, {"fullname": "primesw.prime.SYNTH_YPOS", "modulename": "primesw.prime", "qualname": "SYNTH_YPOS", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([-6242.531374  , -6141.43603983, -6054.73851884, -5953.54260001,\n       -5852.30035979, -5765.48374707, -5664.15672177, -5562.79111177,\n       -5475.87538835, -5374.44022431, -5272.97399371, -5185.97841963,\n       -5084.45744369, -4982.91267323, -4895.85591308, -4794.27072076,\n       -4692.66879919, -4605.56897563, -4503.9403974 , -4402.3019605 ,\n       -4315.17661655, -4213.52495494, -4111.87001052, -4024.73625516,\n       -3923.08129418, -3821.42952425, -3734.30395957, -3632.66493195,\n       -3531.03538868, -3443.93418239, -3342.32979659, -3240.74102942,\n       -3153.67997007, -3052.12846626, -2950.598573  , -2863.59314841,\n       -2762.11237883, -2660.65906956, -2573.72426935, -2472.33166917,\n       -2370.97225436, -2284.122821  , -2182.83554019, -2081.58702282,\n       -1994.83737245, -1893.67203926, -1792.55094402, -1705.91518784,\n       -1604.88808488, -1503.91065025])"}, {"fullname": "primesw.prime.SYNTH_ZPOS", "modulename": "primesw.prime", "qualname": "SYNTH_ZPOS", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([1428.22663895, 1404.9257232 , 1384.88999865, 1361.43852111,\n       1337.90827722, 1317.66995298, 1293.97504102, 1270.1942372 ,\n       1249.73509015, 1225.77542686, 1201.72276543, 1181.02453785,\n       1156.77888242, 1132.43315908, 1111.47770227, 1086.92488254,\n       1062.26489785, 1041.03400953, 1016.15277964,  991.1573987 ,\n        969.6329908 ,  944.40232752,  919.05058092,  897.21474963,\n        871.61379271,  845.88483511,  823.71973863,  797.7278038 ,\n        771.60099544,  749.08907437,  722.68572634,  696.14074783,\n        673.26462524,  646.42970201,  619.4464814 ,  596.18909891,\n        568.90278803,  541.46164749,  517.80622717,  490.04905226,\n        462.13065323,  438.0606711 ,  409.81356785,  381.39897532,\n        356.89834051,  328.14264026,  299.21335127,  274.26632698,\n        244.98385268,  215.52178328])"}, {"fullname": "primesw.prime.SYNTH_POS", "modulename": "primesw.prime", "qualname": "SYNTH_POS", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([[69215.97057508, -6242.531374  ,  1428.22663895],\n       [69480.44662705, -6141.43603983,  1404.9257232 ],\n       [69706.40911294, -6054.73851884,  1384.88999865],\n       [69969.18467343, -5953.54260001,  1361.43852111],\n       [70231.11857452, -5852.30035979,  1337.90827722],\n       [70454.91674057, -5765.48374707,  1317.66995298],\n       [70715.18415549, -5664.15672177,  1293.97504102],\n       [70974.62662114, -5562.79111177,  1270.1942372 ],\n       [71196.30325009, -5475.87538835,  1249.73509015],\n       [71454.11198298, -5374.44022431,  1225.77542686],\n       [71711.11182052, -5272.97399371,  1201.72276543],\n       [71930.70839187, -5185.97841963,  1181.02453785],\n       [72186.10608653, -5084.45744369,  1156.77888242],\n       [72440.71045452, -4982.91267323,  1132.43315908],\n       [72658.26693929, -4895.85591308,  1111.47770227],\n       [72911.29961567, -4794.27072076,  1086.92488254],\n       [73163.55400328, -4692.66879919,  1062.26489785],\n       [73379.10893932, -4605.56897563,  1041.03400953],\n       [73629.82119345, -4503.9403974 ,  1016.15277964],\n       [73879.76950962, -4402.3019605 ,   991.1573987 ],\n       [74093.36015524, -4315.17661655,   969.6329908 ],\n       [74341.79489098, -4213.52495494,   944.40232752],\n       [74589.47977345, -4111.87001052,   919.05058092],\n       [74801.14208574, -4024.73625516,   897.21474963],\n       [75047.34088887, -3923.08129418,   871.61379271],\n       [75292.80336019, -3821.42952425,   845.88483511],\n       [75502.57231563, -3734.30395957,   823.71973863],\n       [75746.57534655, -3632.66493195,   797.7278038 ],\n       [75989.85512801, -3531.03538868,   771.60099544],\n       [76197.76442711, -3443.93418239,   749.08907437],\n       [76439.61054906, -3342.32979659,   722.68572634],\n       [76680.7461448 , -3240.74102942,   696.14074783],\n       [76886.82833966, -3153.67997007,   673.26462524],\n       [77126.55527427, -3052.12846626,   646.42970201],\n       [77365.58400364, -2950.598573  ,   619.4464814 ],\n       [77569.8706008 , -2863.59314841,   596.18909891],\n       [77807.51485289, -2762.11237883,   568.90278803],\n       [78044.47276422, -2660.65906956,   541.46164749],\n       [78246.99446109, -2573.72426935,   517.80622717],\n       [78482.59130139, -2472.33166917,   490.04905226],\n       [78717.51337097, -2370.97225436,   462.13065323],\n       [78918.29986461, -2284.122821  ,   438.0606711 ],\n       [79151.88352716, -2182.83554019,   409.81356785],\n       [79384.80363257, -2081.58702282,   381.39897532],\n       [79583.88365476, -1994.83737245,   356.89834051],\n       [79815.48746062, -1893.67203926,   328.14264026],\n       [80046.43841324, -1792.55094402,   299.21335127],\n       [80243.83985851, -1705.91518784,   274.26632698],\n       [80473.4959342 , -1604.88808488,   244.98385268],\n       [80702.50977538, -1503.91065025,   215.52178328]])"}, {"fullname": "primesw.prime.prime", "modulename": "primesw.prime", "qualname": "prime", "kind": "class", "doc": "<p>Class to wrap a keras model to be used with the SW-trained PRIME architecture.</p>\n\n<p>Parameters:\n    model (keras model): Keras model to be used for prediction\n    in_scaler (sklearn scaler): Scaler to be used for input data\n    tar_scaler (sklearn scaler): Scaler to be used for target data</p>\n", "bases": "keras.engine.training.Model"}, {"fullname": "primesw.prime.prime.__init__", "modulename": "primesw.prime", "qualname": "prime.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">in_scaler</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tar_scaler</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">in_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tar_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">out_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">hps</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mf\">0.08333333333333333</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "primesw.prime.prime.window", "modulename": "primesw.prime", "qualname": "prime.window", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "primesw.prime.prime.stride", "modulename": "primesw.prime", "qualname": "prime.stride", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "primesw.prime.prime.fraction", "modulename": "primesw.prime", "qualname": "prime.fraction", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "primesw.prime.prime.predict", "modulename": "primesw.prime", "qualname": "prime.predict", "kind": "function", "doc": "<p>Generate prime predictions from input dataframes or time ranges.</p>\n\n<p>Parameters:\n    input (dataframe, ndarray): Input data to be scaled and predicted\n    start (string, optional): Start time of prediction (will use real data). Format 'YYYY-MM-DD HH:MM:SS'.\n    stop (string, optional): Stop time of prediction (will use real data). Format 'YYYY-MM-DD HH:MM:SS'.\n    pos (list, optional): Position propagated to if 'start' and 'stop' are specified.\nReturns:\n    output (dataframe): Scaled output data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">13.25</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "primesw.prime.prime.predict_raw", "modulename": "primesw.prime", "qualname": "prime.predict_raw", "kind": "function", "doc": "<p>Generates PRIME predictions from input dataframe. Assumes that input has keys specified by <code>primesw.prime.in_keys</code>. It is generally recommended to use <code>primesw.prime.predict</code> instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "primesw.prime.prime.predict_grid", "modulename": "primesw.prime", "qualname": "prime.predict_grid", "kind": "function", "doc": "<p>Generate predictions from prime model on a grid of points.</p>\n\n<p>Parameters:\n    gridsize (float): Spacing of grid points\n    x_extent (list): Range of x values to calculate on\n    framenum (int): Number of frames to calculate\n    bx (float, array-like): IMF Bx value. If array like, must be of length framenum.\n    by (float, array-like): IMF By value. If array like, must be of length framenum.\n    bz (float, array-like): IMF Bz value. If array like, must be of length framenum.\n    vx (float, array-like): Solar wind Vx value. If array like, must be of length framenum.\n    vy (float, array-like): Solar wind Vy value. If array like, must be of length framenum.\n    vz (float, array-like): Solar wind Vz value. If array like, must be of length framenum.\n    ni (float, array-like): Solar wind ion density value. If array like, must be of length framenum.\n    vt (float, array-like): Solar wind ion thermal speed value. If array like, must be of length framenum.\n    rx (float, array-like): Wind spacecraft position x value. If array like, must be of length framenum.\n    ry (float, array-like): Wind spacecraft position y value. If array like, must be of length framenum.\n    rz (float, array-like): Wind spacecraft position z value. If array like, must be of length framenum.\n    y_extent (list): Range of y values to calculate on. If None, z_extent must be specified.\n    z_extent (list): Range of z values to calculate on. If None, y_extent must be specified.\n    y (float, array-like): Y position that is held constant if y_extent is not specified. Default 0.\n    z (float, array-like): Z position that is held constant if z_extent is not specified. Default 0.\n    subtract_ecliptic (bool): Whether or not to subtract the Earth's motion in the ecliptic from Vy\nReturns:\n    output_grid (ndarray): Array of predicted values on the grid. Shape (framenum, x_extent/gridsize, y_extent/gridsize, 18)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">gridsize</span>,</span><span class=\"param\">\t<span class=\"n\">x_extent</span>,</span><span class=\"param\">\t<span class=\"n\">framenum</span>,</span><span class=\"param\">\t<span class=\"n\">bx</span>,</span><span class=\"param\">\t<span class=\"n\">by</span>,</span><span class=\"param\">\t<span class=\"n\">bz</span>,</span><span class=\"param\">\t<span class=\"n\">vx</span>,</span><span class=\"param\">\t<span class=\"n\">vy</span>,</span><span class=\"param\">\t<span class=\"n\">vz</span>,</span><span class=\"param\">\t<span class=\"n\">ni</span>,</span><span class=\"param\">\t<span class=\"n\">vt</span>,</span><span class=\"param\">\t<span class=\"n\">rx</span>,</span><span class=\"param\">\t<span class=\"n\">ry</span>,</span><span class=\"param\">\t<span class=\"n\">rz</span>,</span><span class=\"param\">\t<span class=\"n\">y_extent</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">z_extent</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">subtract_ecliptic</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "primesw.prime.prime.build_model", "modulename": "primesw.prime", "qualname": "prime.build_model", "kind": "function", "doc": "<p>Builds the underlying PRIME model with no weights or biases loaded.</p>\n\n<p>Parameters:\n    units (list): Number of units in each layer of the model\n    activation (str): Activation function to use in hidden layers\n    dropout (float): Dropout rate to use in hidden layers\n    lr (float): Learning rate to use in optimizer</p>\n\n<p>Returns:\n    model (keras model): Keras model to be used for prediction (weights not initialized)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">352</span><span class=\"p\">,</span> <span class=\"mi\">192</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s1\">&#39;elu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "primesw.prime.prime.build_synth_input", "modulename": "primesw.prime", "qualname": "prime.build_synth_input", "kind": "function", "doc": "<p>Builds a synthetic input array from user-specified quantities at L1.\nFor input arrays made from measured data at L1, see <code>primesw.prime.build_real_input</code>.</p>\n\n<p>Parameters:\n    epoch (datetime): Datetime of start of input Dataframe.\n    bx (float, array-like): IMF Bx value.\n    by (float, array-like): IMF By value.\n    bz (float, array-like): IMF Bz value.\n    vx (float, array-like): Solar wind Vx value.\n    vy (float, array-like): Solar wind Vy value.\n    vz (float, array-like): Solar wind Vz value.\n    ni (float, array-like): Solar wind ion density value.\n    vt (float, array-like): Solar wind ion thermal speed value.\n    rx (float, array-like): Wind spacecraft position x value.\n    ry (float, array-like): Wind spacecraft position y value.\n    rz (float, array-like): Wind spacecraft position z value.\n    tar_rx (float, array-like): Propagation target position x value.\n    tar_ry (float, array-like): Propagation target position y value.\n    tar_rz (float, array-like): Propagation target position z value.</p>\n\n<p>Returns:\n    input (Dataframe): Input dataframe suitable to predict from with self.predict().</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">epoch</span><span class=\"o\">=</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">&#39;1970-01-01 00:00:00+0000&#39;</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"s1\">&#39;UTC&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">bx</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">by</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">bz</span><span class=\"o\">=-</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">vx</span><span class=\"o\">=-</span><span class=\"mi\">400</span>,</span><span class=\"param\">\t<span class=\"n\">vy</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">vz</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ni</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">vt</span><span class=\"o\">=</span><span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">rx</span><span class=\"o\">=</span><span class=\"mi\">200</span>,</span><span class=\"param\">\t<span class=\"n\">ry</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">rz</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">tar_rx</span><span class=\"o\">=</span><span class=\"mf\">13.25</span>,</span><span class=\"param\">\t<span class=\"n\">tar_ry</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">tar_rz</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "primesw.prime.prime.build_real_input", "modulename": "primesw.prime", "qualname": "prime.build_real_input", "kind": "function", "doc": "<p>Load Wind spacecraft input data for PRIME in between specified date strings.</p>\n\n<p>Parameters:\n    start (string): The start date of the data to load ('YYYY-MM-DD')\n    end (string): The end date of the data to load ('YYYY-MM-DD')\n    pos (list): Location of propagation in GSE coordinates (Earth Radii). Default [13.25, 0, 0].\n    load_freq (string): Max length of data loaded by CdasWs. If throwing RuntimeError, try modifying this parameter. Default '3M' (three months).\nReturn:\n    input (Dataframe): Input dataframe suitable to predict from with self.predict().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">stop</span>, </span><span class=\"param\"><span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">13.25</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">load_freq</span><span class=\"o\">=</span><span class=\"s1\">&#39;3M&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "primesw.prime.crps_loss", "modulename": "primesw.prime", "qualname": "crps_loss", "kind": "function", "doc": "<p>Tensorflow implementation of the Continuous Rank Probability Score loss function. Assumes seven output features. For a simpler functional version, see <code>primesw.crps_f</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_true : tf.Tensor\n    Ground truth values of predicted variable.\ny_pred : tf.Tensor\n    mu and sigma^2 values of predicted distribution.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>crps : tf.Tensor\n    Continuous rank probability score.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "primesw.prime.crps_f", "modulename": "primesw.prime", "qualname": "crps_f", "kind": "function", "doc": "<p>Helper function that calculates continuous rank probability score.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ep</span>, </span><span class=\"param\"><span class=\"n\">sg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "primesw.prime.ep_f", "modulename": "primesw.prime", "qualname": "ep_f", "kind": "function", "doc": "<p>Helper function that calculates epsilon (error) for CRPS.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">mu</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "primesw.prime.unstack_helper", "modulename": "primesw.prime", "qualname": "unstack_helper", "kind": "function", "doc": "<p>Helper function that unstacks the outputs and targets used in <code>primesw.crps</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();